// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package wire

import (
	"ginana-blog/internal/config"
	"ginana-blog/internal/db"
	"ginana-blog/internal/server"
	"ginana-blog/internal/service"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitApp() (*App, func(), error) {
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, nil, err
	}
	gormDB, err := db.NewDB(configConfig)
	if err != nil {
		return nil, nil, err
	}
	memcache, err := db.NewMC(configConfig)
	if err != nil {
		return nil, nil, err
	}
	helperMap, err := service.NewHelperMap()
	if err != nil {
		return nil, nil, err
	}
	serviceService, err := service.New(configConfig, gormDB, memcache, helperMap)
	if err != nil {
		return nil, nil, err
	}
	application, err := server.InitRouter(serviceService, configConfig)
	if err != nil {
		return nil, nil, err
	}
	httpServer, err := server.NewHttpServer(application, configConfig)
	if err != nil {
		return nil, nil, err
	}
	syncedEnforcer, err := db.NewCasbin(serviceService, configConfig)
	if err != nil {
		return nil, nil, err
	}
	app, cleanup, err := NewApp(httpServer, serviceService, syncedEnforcer)
	if err != nil {
		return nil, nil, err
	}
	return app, func() {
		cleanup()
	}, nil
}

// wire.go:

var initProvider = wire.NewSet(config.NewConfig, db.NewDB, db.NewMC)

var svcProvider = wire.NewSet(service.NewHelperMap, service.New, db.NewCasbin)

var httpProvider = wire.NewSet(server.InitRouter, server.NewHttpServer)
